div(width = 12, shiny::a(
img(src = "SLC6A1ConnectCircle.jpg", width = "20%"),
href = "https://slc6a1connect.org",
target = '_blank'))
)
),
panel(status="default",heading = "Related organizations", width = 12,
fluidRow(
column(3, align = "center", offset = 1,
div(width = 12, shiny::a(
img(src = "aes.png", width = "70%"),
href = "https://www.aesnet.org/",
target = '_blank'))
),
column(3, align = "center",
div(width = 12, shiny::a(
img(src = "nord.png", width = "70%"),
href = "https://rarediseases.org/",
target = '_blank'))
),
column(3, align = "center",
div(width = 12, shiny::a(
img(src = "epi_foundation.png", width = "70%"),
href = "https://www.epilepsy.com/",
target = '_blank'))
),
column(3, align = "center", offset = 1,
div(width = 12, shiny::a(
img(src = "combined.png", width = "70%"),
href = "https://combinedbrain.org/",
target = '_blank'))
),
column(3, align = "center",
div(width = 12, shiny::a(
img(src = "global_genes.png", width = "70%"),
href = "https://globalgenes.org/",
target = '_blank'))
),
column(3, align = "center",
div(width = 12, shiny::a(
img(src = "ren.png", width = "70%"),
href = "https://www.rareepilepsynetwork.org/",
target = '_blank'))
),
column(3, align = "center",
div(width = 12, shiny::a(
img(src = "epi_council.png", width = "70%"),
href = "https://www.epilepsyleadershipcouncil.org/",
target = '_blank'))
)
))
)))))
), # end families tab
# ##### VARIANT ANALYSIS #####
tabPanel(title = "Variant Analysis", value = "variantTab",
fluidRow(
column(10, offset = 1,
panel(heading = "Analyse your variants", status = "info",
fluidRow(
column(12,style='padding:30px;',
fluidRow(
panel(status="default", heading = "Enter variant",
column(3,
pickerInput(
inputId = 'var_gene',
label =  h5(strong(var_possible_genes_title)),
width = "100%",
choices = var_possible_genes,
options = list(`style` = "default")
)
),
column(3,
numericInputIcon(
inputId = "search_cDNA_pos",
label = h5(strong("cDNA Position")),
min = 1,
max = 10000,
value = 1024,
width = "100%"
),
pickerInput(
inputId = "search_Allele",
label = "Ref",
choices = c("G", "A", "C", "T"),
selected = "C"
),
pickerInput(
inputId = "search_cDNA_alt",
label = "Alt",
choices = c("G", "A", "C", "T", "null"),
selected = "C"
),
actionButton(inputId = "search_var_c", label = "Search")),
column(3,
numericInputIcon(
inputId = "search_AA_pos",
label = h5(strong("Amino Acid Position")),
min = 1,
max = 10000,
value = 342,
width = "100%"
),
pickerInput(
inputId = "search_AA_ref",
label = "Ref",
choices = sort(unique(master.df$AA_ref)),
selected = "Gly"
),
pickerInput(
inputId = "search_AA_alt",
label = "Alt",
choices = sort(unique(master.df$AA_alt)),
selected = "Met"
),
actionButton(inputId = "search_var_p", label = "Search")),
column(2,
pickerInput(
inputId = "get_var_type",
label = h5(strong("Variant Consequence")),
choices = "Missense",
selected = "Missense"))
)))),
fluidRow(
column(12,style='padding:30px;',
fluidRow(
panel(status="default",
heading = "Variant Information",
fluidRow(
div(width = "100%",valueBoxOutput("geneBox1")),
div(width = "100%",valueBoxOutput("geneBox2")),
div(width = "100%",valueBoxOutput("geneBox3"))
),
##Clinical significance according to ClinVar
div(h4("Clinical significance according to ClinVar",
tippy(icon("question-circle"),
tooltip = h6(HTML(paste0("ClinVar version: 14th July 2021")),
align = "left"),
animation = "scale",
theme = "light"))),
fluidRow(
#tags$head(tags$style(HTML("a {color: black}"))),
#column(4,
div(width = "100%",valueBoxOutput("ClinVarbox")))
),
))),
fluidRow(
column(12,style='padding:30px;',
fluidRow(
panel(status="default",
heading = "Patient information",
box(title = var_patient_info_title, width = 12,
DT::dataTableOutput(outputId = "patientTable"),
br(), p(var_patient_info_abb, style=sub_style, align = "center")))#,
))),
fluidRow(
column(12,style='padding:30px;',
fluidRow(
panel(status="default",
heading = "Custom variant analysis",
tabsetPanel(
tabPanel("Comparative Information",
br(),
h4("Compare the selected variant with other similar variants."),
br(),
radioGroupButtons(inputId = "compareButtons",
label = "Variants with the same:",
choices = c("Amino Acid Position", "Protein region", "Variant Type"),
justified = TRUE,
status = "default",
checkIcon = list(yes = icon("ok",lib = "glyphicon"))
),
br(),
div(width = "100%", plotlyOutput("comparePlot"))
),
tabPanel("In silico scores",
br(),
#column(5,plotOutput(outputId = "paraz_legend", height = 30, width = 450)),
#column(12,div(width = "100%", plotlyOutput("paraz_legend"))),
column(4,
"Paralog conservation score",
align = "center",
div(width = "100%", plotlyOutput("Var_analyis_paraz"))
),
column(4,
"Missense constraint score",
align = "center",
div(width = "100%", plotlyOutput("Var_analyis_mtr"))
),
column(4,
"Pathogenic variant enrichment",
align = "center",
div(width = "100%", plotlyOutput("Var_analyis_per"))
),
column(12,plotOutput(outputId = "paraz_legend", height = 30, width = 600))
)
))
)))
), # end variant analysis tab
##### RESEARCH #####
tabPanel(title = "Research", value = "researchTab",
fluidRow(
column(10, offset = 1,
panel(heading = "Analyse your variants", status = "danger",
fluidRow(
column(12,style='padding:15px;',
panel(heading="Filter Registry", status="default",
fluidRow(
column(12,
selectizeGroupUI(
id = "research-filters",
btn_label = "Reset filters",
params = list(
varcons = list(
inputId = "Vartype",
title = p(strong("Variant Type")),
placeholder="all",
choices = c("Missense", "Other","PTV","Synonymous")
),
aachange = list(
inputId = "AA_alt",
title = p(strong("Amino Acid Change")),
placeholder="all",
choices = unique(Patient_data.df$AA_alt)
),
domain = list(
inputId = "Domain",
title = p(strong("Protein region")),
placeholder="all",
choices = unique(Patient_data.df$Domain)
),
epilepsy = list(
inputId = "Epilepsy_syndrome",
title = p(strong("Epilepsy Syndromes"),tippy(icon("question-circle"),
tooltip = epi_syndrome_tippy,
animation = "scale", theme = "light")),
placeholder="all",
choices = unique(Patient_data.df$Epilepsy_syndrome)
),
autism = list(
inputId = "Autism",
title = p(strong("Autism")),
placeholder="all",
choices = unique(Patient_data.df$Autism)
),
id = list(
inputId = "ID_after_sz_onset",
title = p(strong("DD/ID"),tippy(icon("question-circle"),
tooltip = dd_id_tippy,
animation = "scale", theme = "light")),
placeholder="all",
choices = unique(Patient_data.df$ID_after_sz_onset)
),
Hotzone_2D= list(
inputId = "Hotzone_2D",
title = p(strong("PER"),
tippy(icon("question-circle"),
tooltip = h6(HTML(paste0("PER: Pathogenic enriched regions<br>",
"Reference: PÃ©rez-Palma et al., 2019, PMID:31871067" )),
align = "left"),
animation = "scale",
theme = "light")),
placeholder="all",
choices = c(" No", "Mild","Moderate","Severe/Profound","Unkno"),
multiple = TRUE
),
PER3D= list(
inputId = "PER3D",
title = p(strong("PER 3D"),
tippy(icon("question-circle"),
tooltip = h6(HTML(paste0("PER3D: Pathogenic enriched regions in 3D<br>",
"Reference: Iqbal et al., to be published" )),
align = "left"),
animation = "scale",
theme = "light")),
placeholder="all",
choices = c(" No", "Mild","Moderate","Severe/Profound","Unkno"),
multiple = TRUE
))
)),
)))),
fluidRow(
column(12,style='padding:15px;',
panel(status = "default",heading = "Custom variant exploration",
div(textOutput(outputId = "filtered_n"),
br(),
"  "),
tabsetPanel(
tabPanel(
"Genotype Interface",
fluidRow(
column(
12,
br(),
p(
strong("Selected variants are displayed in 2D (lolliplot) and 3D (protein structure).")
),
fluidRow(
column(7,
materialSwitch(
inputId = "gnomad_m",
label = "Reference population missense variants (gnomAD)",
status = "primary",
right = T,
inline = T
),
materialSwitch(
inputId = "PER",
label = "Pathogenic enriched regions (PER)",
status = "primary",
right = T,
inline = T
)
)),
fluidRow(
column(5,plotOutput(outputId = "Genotype_legend_plot", height = 30, width = 450) ),
),
fluidRow(
column(7,
addSpinner(plotlyOutput(outputId = "Genotype_overview_plot"), color =
spinner_color),
br(),
p(research_geno_transcripts , align="center", style=sub_style),
br()
),
column(5,
addSpinner(color = spinner_color,
r3dmolOutput(
outputId = "threeDmolGene_all",
width = "100%",
height = "400px"
)),
div("UniProt:",
align="center",
style=sub_style,
shiny::a("P30531", href="https://www.uniprot.org/uniprot/P30531", target="_blank"),
br(),
div("Predicted structure", align="center", style=sub_style,
shiny::a("Alpha fold", href="https://www.alphafold.ebi.ac.uk/entry/P30531", target="_blank"))))
)))),
tabPanel("Phenotype Interface",br(),
fluidRow(
column(12,align="justify", plotlyOutput("research_phenotype1")
)),
fluidRow(
column(12,align="justify", plotlyOutput("research_phenotype6")
),
column(12, align="center", p(research_pheno_abb2, style=sub_style))),
fluidRow(
column(5, offset = 1,plotlyOutput("research_phenotype2"), align="center",
),
column(5, plotlyOutput("research_phenotype3"))
),
fluidRow(
column(5, offset = 1,plotlyOutput("research_phenotype4"), align="center",
),
column(5,plotlyOutput("research_phenotype5"))),
fluidRow(
column(12,
p(research_pheno_abb, style=sub_style, align = "center")))
),
tabPanel("Functional interface",br(),
fluidRow(
column(4,align="justify",plotlyOutput("research_functional1")),
column(4,align="justify",plotlyOutput("research_functional2")),
column(4,align="justify",plotlyOutput("research_functional3")),
column(4,align="justify",plotlyOutput("research_functional4")),
column(4,align="justify",plotlyOutput("research_functional5"))
))
))))
)))
), #end research tab
##### ABOUT #####
tabPanel(title = "About",
value = "aboutTab",
fluidRow(
column(10, offset = 1,
panel(heading = "About", status = "primary",
tabsetPanel(
tabPanel("General Information",
panel(heading ="Portal version", status = "default",
p(strong("This is the alpha version of the  SLC6A1 Portal")),
p("The SLC6A1 Portal is a coalition of investigators seeking to aggregate and harmonize data generated to study
SLC6A1-related disorders, and to make summary data interactively accessible for the wider scientific community,
while providing educational resources for everyone. The goals of this project are: "),
br(),
fluidRow(
column(6,
p(HTML(paste0("<ul><li> Providing information on ", em("SLC6A1"),"-related disorders</li>"))),
p(HTML(paste0("<li> Supporting research on ", em("SLC6A1"),"-related disorders</li>"))),
p(HTML(paste0("<li> Facilitating recruitment of individuals to the global ", em("SLC6A1")," registries</li>")))),
column(6,
p(HTML("<ul><li> Providing support in variant interpretation and classification</li>")),
p(HTML(paste0("<li> Visualizing data from the global ", em("SLC6A1")," registries</li>"))),
p(HTML("<li> Linking researchers, clinicians and families</li>")))),
br(),
footer = div("The SLC6A1 Portal is an ongoing project of the scientific community in collaboration with SLC6A1Connect. Interested collaborators are invited to reach out to join the project.")),
panel(heading = "Teams and People", status = "default",
p("The current version of the SLC6A1 Portal has been developed by an international team of researchers and clinicians:"),
fluidRow(
column(10,
panel(heading = "Team Leaders",
p(strong("Dennis Lal"), "(Cleveland, US): General concept, web development, bioinformatics, video production"),
p(strong("Rikke MÃ¸ller"), "(Dianalund, DK): Clinical & genetic data"),
p(strong("Kimberly Goodspeed"), "(Dallas, US): Clinical & genetic data"),
p(strong("Katty (Jing-Qiong) Kang"), "(Vanderbilt, US): Molecular data"),
)),
column(12, p("")),
column(2,
panel(style="height: 230px;",heading = "Clinical & Genetic Data",
div(style="height: 100%;",
p(strong("Katrine Johannesen ")))
)),
column(2,
panel(style="height: 230px;",heading = "Molecular Data",
div(style="height: 100%",p(strong("Felicia Mermer")))
)),
column(2,
panel(style="height: 230px;",heading = "Web Development",
div(style="height: 100%",p(strong("Arthur Stefanski")),
p(strong("Tobias BrÃ¼nger")),
p("Eduardo Perez-Palma"),
p("Marie Macnee"),
p("Chiara KlÃ¶ckner"))
)),
column(2,
panel(style="height: 230px;",heading = "Bioinformatics",
div(style="height: 100%",
p(strong("Tobias BrÃ¼nger")),
p("Eduardo Perez-Palma"),
p("Marie Mcnee"),
p("Patrick May"),
p("Chiara KlÃ¶ckner"),
p("Johannes Lemke"))
)),
column(2,
panel(style="height: 230px;", heading = "Video",
div(style="height: 100%",p(strong("Arthur Stefanski")),
p("Amber Freed"))
))
)),
panel(heading = "Impressum",
status = "default",
p("We object to any commercial use and disclosure of data."),
p(strong("Copyright and use:"), "The authors grants you the right of use to make a private copy for personal purposes.
However, you are not entitled to change and/or pass on the materials or publish them yourself.
Upon request, you will receive free information about the personal data stored about you.
To do so, please contact the administrator."),
p(strong("No liability:"), "The contents of this web project have been carefully checked and created to
the best of our knowledge. But for the information presented here is no claim to completeness,
timeliness, quality and accuracy. No responsibility can be accepted for any damage caused by reliance
on or use of the contents of this website."))
),
tabPanel("Terms and Data Information",
panel(heading = "Terms of Use", status = "default",
p(about_terms_of_use,
shiny::a(href=contact_us, "Contact us"),
"that we can improve.")),
panel(heading = "Data Generation", status = "default",
about_data_generation)
),
tabPanel(title = "Tutorials", value = "tutorialTab", #### Tutorials
fluidRow(
column(10, offset = 1,
panel(heading = "Tutorials", status = "primary",
div(align = "center",
tabsetPanel(
tabPanel("Basic Information",
column(8, offset = 2,
box(title= "",
align = "right",
width = 12,
embed_url(tut_basic_info) %>%
use_rounded() %>% use_align("center") %>% use_bs_responsive()
))
),
tabPanel("Families",
column(8, offset = 2,
box(title= "",
align = "right",
width = 12,
embed_url(tut_family) %>%
use_rounded() %>% use_align("center") %>% use_bs_responsive()
))
),
tabPanel("Variant Analysis",
column(8, offset = 2,
box(title= "",
align = "right",
width = 12,
embed_url(tut_variant_analysis) %>%
use_rounded() %>% use_align("center") %>% use_bs_responsive()
))
),
tabPanel("Research",
column(8, offset = 2,
box(title= "",
align = "right",
width = 12,
embed_url(tut_research) %>%
use_rounded() %>% use_align("center") %>% use_bs_responsive()
)))
)))))
)))))))) # end ui
Patient_data.df %>%
dplyr::rename(phenotype_fac = phenotype) %>%
filter(phenotype_fac != "NA") %>%
mutate(phenotype_fac =ifelse(phenotype_fac == "Yes"," Yes",phenotype_fac)) %>%
select(phenotype_fac) %>%
arrange(phenotype_fac)
runApp()
shiny::runApp()
install.packages("learnr")
